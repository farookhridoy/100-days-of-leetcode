Problem Statement
Given a 32-bit signed integer, reverse digits of an integer.

Note:
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [âˆ’231, 231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Constraints:
-231 <= x <= 231 - 1

Examples
Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
Analysis
This problem is pretty straightforward ðŸ˜„. To reverse an integer, we only have to make most significant digit as the least significant digit and vice versa, the second most significant digit to the second least significant digit and vice versa and so on.

There are couple of things we need to keep in mind -

If the input is negative, the output will also be negative
If the input is greater than the given range (âˆ’231, 231 âˆ’ 1), return 0.

Approach
The approach is simple -

First we find out if the number is negative then we will store this information.
First store the result in a data type which is bigger than an integer (for e.g., long in case of Java/Kotlin)/
Divide the number repeatedly by 10 until the number becomes zero.
After the loop check if the output is greater than the range (âˆ’231, 231 âˆ’ 1).
At last, return the output with the correct sign (positive or negative).
Time Complexity
Since we are going through the entire number digit by digit, the time complexity should be O(log10n). The reason behind log10 is because we are dealing with integers which are base 10.

Space Complexity
We are not using any data structure for interim operations, therefore, the space complexity is O(1).